// API "Iroha-Gateway Server": CLI Commands
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.1.0-dirty

package cli

import (
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/soramitsu/iroha-gateway/client"
	"github.com/spf13/cobra"
	"golang.org/x/net/context"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AddAccountsCommand is the command line data structure for the add action of accounts
	AddAccountsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteAccountsCommand is the command line data structure for the delete action of accounts
	DeleteAccountsCommand struct {
		Payload     string
		ContentType string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// GetAccountsCommand is the command line data structure for the get action of accounts
	GetAccountsCommand struct {
		// Public key of URL-encoded target's account
		Target string
		// Public key of URL-encoded creator's account
		CreatorPubkey string
		// If this value is true, you can only get transactions committed to ametsuchi
		IsCommitted string
		PrettyPrint bool
	}

	// GetAllAccountsCommand is the command line data structure for the getAll action of accounts
	GetAllAccountsCommand struct {
		PrettyPrint bool
	}

	// UpdateAccountsCommand is the command line data structure for the update action of accounts
	UpdateAccountsCommand struct {
		Payload     string
		ContentType string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// AddCurrencyCommand is the command line data structure for the add action of currency
	AddCurrencyCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// AddValueCurrencyCommand is the command line data structure for the addValue action of currency
	AddValueCurrencyCommand struct {
		Payload     string
		ContentType string
		// currency's uri
		CurrencyURI string
		PrettyPrint bool
	}

	// DeleteCurrencyCommand is the command line data structure for the delete action of currency
	DeleteCurrencyCommand struct {
		Payload     string
		ContentType string
		// currency's uri
		CurrencyURI string
		PrettyPrint bool
	}

	// GetAllCurrencyCommand is the command line data structure for the getAll action of currency
	GetAllCurrencyCommand struct {
		// currency's uri
		CurrencyURI string
		// Public key of creator's account
		CreatorPubkey string
		// If this value is true, you can only get transactions committed to ametsuchi
		IsCommitted string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// SubtractValueCurrencyCommand is the command line data structure for the subtractValue action of currency
	SubtractValueCurrencyCommand struct {
		Payload     string
		ContentType string
		// currency's uri
		CurrencyURI string
		PrettyPrint bool
	}

	// TransferCurrencyCommand is the command line data structure for the transfer action of currency
	TransferCurrencyCommand struct {
		Payload     string
		ContentType string
		// currency's uri
		CurrencyURI string
		PrettyPrint bool
	}

	// UpdateCurrencyCommand is the command line data structure for the update action of currency
	UpdateCurrencyCommand struct {
		Payload     string
		ContentType string
		// currency's uri
		CurrencyURI string
		PrettyPrint bool
	}

	// UpdateQuorumCommand is the command line data structure for the update action of quorum
	UpdateQuorumCommand struct {
		Payload     string
		ContentType string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// AddSignatoriesCommand is the command line data structure for the add action of signatories
	AddSignatoriesCommand struct {
		Payload     string
		ContentType string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// DeleteSignatoriesCommand is the command line data structure for the delete action of signatories
	DeleteSignatoriesCommand struct {
		Payload     string
		ContentType string
		// URL encoded signatory
		Sig string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}

	// GetAllSignatoriesCommand is the command line data structure for the getAll action of signatories
	GetAllSignatoriesCommand struct {
		// Public key of URL-encoded target's account
		Target string
		// Public key of URL-encoded creator's account
		CreatorPubkey string
		// If this value is true, you can only get transactions committed to ametsuchi
		IsCommitted string
		PrettyPrint bool
	}

	// GetAllTransactionsCommand is the command line data structure for the getAll action of transactions
	GetAllTransactionsCommand struct {
		// currency's uri
		CurrencyURI string
		// Public key of creator's account
		CreatorPubkey string
		// If this value is true, you can only get transactions committed to ametsuchi
		IsCommitted string
		// Public key of URL-encoded target's account
		Target      string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp1 := new(AddAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/accounts"]`,
		Short: ``,
		Long: `

Payload example:

{
   "account": {
      "alias": "sate",
      "pubkey": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm//8eGGkB4uXk=",
      "quorum": 1,
      "signatories": [
         "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm//8eGGkB4uXk=",
         "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc="
      ]
   },
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(AddCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "currency": {
      "description": "This is sample currency description.",
      "domain_name": "sampleDomainName",
      "ledger_name": "sampleLedgerName",
      "name": "sampleCurrencyName",
      "value": 10.1
   },
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "target": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm%2F%2F8eGGkB4uXk%3D",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(AddSignatoriesCommand)
	sub = &cobra.Command{
		Use:   `signatories ["/accounts/TARGET/signatories"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signatories": [
      "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm//8eGGkB4uXk=",
      "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc="
   ],
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add-value",
		Short: ``,
	}
	tmp4 := new(AddValueCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI/add"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "target": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm%2F%2F8eGGkB4uXk%3D",
   "timestamp": "1494693347",
   "value": 10.1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp5 := new(DeleteAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/accounts/TARGET"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(DeleteCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(DeleteSignatoriesCommand)
	sub = &cobra.Command{
		Use:   `signatories ["/accounts/TARGET/signatories/SIG"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get an account by public key`,
	}
	tmp8 := new(GetAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/accounts/TARGET"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-all",
		Short: `getAll action`,
	}
	tmp9 := new(GetAllAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(GetAllCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp11 := new(GetAllSignatoriesCommand)
	sub = &cobra.Command{
		Use:   `signatories ["/accounts/TARGET/signatories"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(GetAllTransactionsCommand)
	sub = &cobra.Command{
		Use:   `transactions ["/transactions/CURRENCY_URI"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "subtract-value",
		Short: ``,
	}
	tmp13 := new(SubtractValueCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI/subtract"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "target": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm%2F%2F8eGGkB4uXk%3D",
   "timestamp": "1494693347",
   "value": 10.1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "transfer",
		Short: ``,
	}
	tmp14 := new(TransferCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI/transfer"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "receiver": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "sender": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm//8eGGkB4uXk=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "target": "aTXzJZauERQ0SkQqARwVWd8vrl3lOpm%2F%2F8eGGkB4uXk%3D",
   "timestamp": "1494693347",
   "value": 10.1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp15 := new(UpdateAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/accounts/TARGET"]`,
		Short: ``,
		Long: `

Payload example:

{
   "alias": "sate",
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp16 := new(UpdateCurrencyCommand)
	sub = &cobra.Command{
		Use:   `currency ["/currency/CURRENCY_URI"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "description": "This is sample currency description.",
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(UpdateQuorumCommand)
	sub = &cobra.Command{
		Use:   `quorum ["/accounts/TARGET/quorum"]`,
		Short: ``,
		Long: `

Payload example:

{
   "creator_pubkey": "rI9Bks2reclulb+3/RENiouWSNaBHbRH6wo7BUoQ1Tc=",
   "quorum": 1,
   "signature": "XcBUqbLdYfANEZAXFrZJ5KQvsOYKdLwuDTu+izwxHw/gwXtU5b4JNDWtwA5zahx61y0saSjmu67RteTG4jlPCw==",
   "timestamp": "1494693347"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the AddAccountsCommand command.
func (cmd *AddAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/accounts"
	}
	var payload client.AddAccountRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAccounts(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteAccountsCommand command.
func (cmd *DeleteAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v", url.QueryEscape(cmd.Target))
	}
	var payload client.DeleteAccountRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAccounts(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the GetAccountsCommand command.
func (cmd *GetAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v", url.QueryEscape(cmd.Target))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp18 *bool
	if cmd.IsCommitted != "" {
		var err error
		tmp18, err = boolVal(cmd.IsCommitted)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--is_committed", "err", err)
			return err
		}
	}
	resp, err := c.GetAccounts(ctx, path, stringFlagVal("creator_pubkey", cmd.CreatorPubkey), tmp18)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
	var creatorPubkey string
	cc.Flags().StringVar(&cmd.CreatorPubkey, "creator_pubkey", creatorPubkey, `Public key of URL-encoded creator's account`)
	var isCommitted string
	cc.Flags().StringVar(&cmd.IsCommitted, "is_committed", isCommitted, `If this value is true, you can only get transactions committed to ametsuchi`)
}

// Run makes the HTTP request corresponding to the GetAllAccountsCommand command.
func (cmd *GetAllAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/accounts"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetAllAccounts(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAllAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateAccountsCommand command.
func (cmd *UpdateAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v", url.QueryEscape(cmd.Target))
	}
	var payload client.UpdateAccountRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateAccounts(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the AddCurrencyCommand command.
func (cmd *AddCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/currency"
	}
	var payload client.CreateCurrencyRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the AddValueCurrencyCommand command.
func (cmd *AddValueCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v/add", url.QueryEscape(cmd.CurrencyURI))
	}
	var payload client.CurrencyValueRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddValueCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddValueCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
}

// Run makes the HTTP request corresponding to the DeleteCurrencyCommand command.
func (cmd *DeleteCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v", url.QueryEscape(cmd.CurrencyURI))
	}
	var payload client.DeleteCurrencyRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
}

// Run makes the HTTP request corresponding to the GetAllCurrencyCommand command.
func (cmd *GetAllCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v", url.QueryEscape(cmd.CurrencyURI))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp19 *bool
	if cmd.IsCommitted != "" {
		var err error
		tmp19, err = boolVal(cmd.IsCommitted)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--is_committed", "err", err)
			return err
		}
	}
	resp, err := c.GetAllCurrency(ctx, path, cmd.CreatorPubkey, cmd.Target, tmp19)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAllCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
	var creatorPubkey string
	cc.Flags().StringVar(&cmd.CreatorPubkey, "creator_pubkey", creatorPubkey, `Public key of creator's account`)
	var isCommitted string
	cc.Flags().StringVar(&cmd.IsCommitted, "is_committed", isCommitted, `If this value is true, you can only get transactions committed to ametsuchi`)
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the SubtractValueCurrencyCommand command.
func (cmd *SubtractValueCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v/subtract", url.QueryEscape(cmd.CurrencyURI))
	}
	var payload client.CurrencyValueRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SubtractValueCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SubtractValueCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
}

// Run makes the HTTP request corresponding to the TransferCurrencyCommand command.
func (cmd *TransferCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v/transfer", url.QueryEscape(cmd.CurrencyURI))
	}
	var payload client.CurrencyTransferRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.TransferCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *TransferCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
}

// Run makes the HTTP request corresponding to the UpdateCurrencyCommand command.
func (cmd *UpdateCurrencyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/currency/%v", url.QueryEscape(cmd.CurrencyURI))
	}
	var payload client.UpdateCurrencyRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateCurrency(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateCurrencyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
}

// Run makes the HTTP request corresponding to the UpdateQuorumCommand command.
func (cmd *UpdateQuorumCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v/quorum", url.QueryEscape(cmd.Target))
	}
	var payload client.UpdateQuorumRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateQuorum(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateQuorumCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the AddSignatoriesCommand command.
func (cmd *AddSignatoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v/signatories", url.QueryEscape(cmd.Target))
	}
	var payload client.SignatoryRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddSignatories(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddSignatoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the DeleteSignatoriesCommand command.
func (cmd *DeleteSignatoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v/signatories/%v", url.QueryEscape(cmd.Target), url.QueryEscape(cmd.Sig))
	}
	var payload client.DeleteSignatoryRequest
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteSignatories(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteSignatoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var sig string
	cc.Flags().StringVar(&cmd.Sig, "sig", sig, `URL encoded signatory`)
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}

// Run makes the HTTP request corresponding to the GetAllSignatoriesCommand command.
func (cmd *GetAllSignatoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/accounts/%v/signatories", url.QueryEscape(cmd.Target))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp20 *bool
	if cmd.IsCommitted != "" {
		var err error
		tmp20, err = boolVal(cmd.IsCommitted)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--is_committed", "err", err)
			return err
		}
	}
	resp, err := c.GetAllSignatories(ctx, path, stringFlagVal("creator_pubkey", cmd.CreatorPubkey), tmp20)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAllSignatoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
	var creatorPubkey string
	cc.Flags().StringVar(&cmd.CreatorPubkey, "creator_pubkey", creatorPubkey, `Public key of URL-encoded creator's account`)
	var isCommitted string
	cc.Flags().StringVar(&cmd.IsCommitted, "is_committed", isCommitted, `If this value is true, you can only get transactions committed to ametsuchi`)
}

// Run makes the HTTP request corresponding to the GetAllTransactionsCommand command.
func (cmd *GetAllTransactionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/transactions/%v", url.QueryEscape(cmd.CurrencyURI))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp21 *bool
	if cmd.IsCommitted != "" {
		var err error
		tmp21, err = boolVal(cmd.IsCommitted)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--is_committed", "err", err)
			return err
		}
	}
	resp, err := c.GetAllTransactions(ctx, path, cmd.CreatorPubkey, cmd.Target, tmp21)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetAllTransactionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var currencyURI string
	cc.Flags().StringVar(&cmd.CurrencyURI, "currency_uri", currencyURI, `currency's uri`)
	var creatorPubkey string
	cc.Flags().StringVar(&cmd.CreatorPubkey, "creator_pubkey", creatorPubkey, `Public key of creator's account`)
	var isCommitted string
	cc.Flags().StringVar(&cmd.IsCommitted, "is_committed", isCommitted, `If this value is true, you can only get transactions committed to ametsuchi`)
	var target string
	cc.Flags().StringVar(&cmd.Target, "target", target, `Public key of URL-encoded target's account`)
}
