// API "Iroha-Gateway Server": accounts Resource Client
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.1.0-dirty

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddAccountsPath computes a request path to the add action of accounts.
func AddAccountsPath() string {

	return fmt.Sprintf("/accounts")
}

// add an account
func (c *Client) AddAccounts(ctx context.Context, path string, payload *AddAccountRequest, contentType string) (*http.Response, error) {
	req, err := c.NewAddAccountsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddAccountsRequest create the request corresponding to the add action endpoint of the accounts resource.
func (c *Client) NewAddAccountsRequest(ctx context.Context, path string, payload *AddAccountRequest, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteAccountsPath computes a request path to the delete action of accounts.
func DeleteAccountsPath(target string) string {
	param0 := target

	return fmt.Sprintf("/accounts/%s", param0)
}

// delete an account
func (c *Client) DeleteAccounts(ctx context.Context, path string, payload *DeleteAccountRequest, contentType string) (*http.Response, error) {
	req, err := c.NewDeleteAccountsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAccountsRequest create the request corresponding to the delete action endpoint of the accounts resource.
func (c *Client) NewDeleteAccountsRequest(ctx context.Context, path string, payload *DeleteAccountRequest, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetAccountsPath computes a request path to the get action of accounts.
func GetAccountsPath(target string) string {
	param0 := target

	return fmt.Sprintf("/accounts/%s", param0)
}

// get an account by public key
func (c *Client) GetAccounts(ctx context.Context, path string, creatorPubkey *string, isCommitted *bool) (*http.Response, error) {
	req, err := c.NewGetAccountsRequest(ctx, path, creatorPubkey, isCommitted)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetAccountsRequest create the request corresponding to the get action endpoint of the accounts resource.
func (c *Client) NewGetAccountsRequest(ctx context.Context, path string, creatorPubkey *string, isCommitted *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if creatorPubkey != nil {
		values.Set("creator_pubkey", *creatorPubkey)
	}
	if isCommitted != nil {
		tmp22 := strconv.FormatBool(*isCommitted)
		values.Set("is_committed", tmp22)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetAllAccountsPath computes a request path to the getAll action of accounts.
func GetAllAccountsPath() string {

	return fmt.Sprintf("/accounts")
}

// get all accounts
func (c *Client) GetAllAccounts(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetAllAccountsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetAllAccountsRequest create the request corresponding to the getAll action endpoint of the accounts resource.
func (c *Client) NewGetAllAccountsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateAccountsPath computes a request path to the update action of accounts.
func UpdateAccountsPath(target string) string {
	param0 := target

	return fmt.Sprintf("/accounts/%s", param0)
}

// update an account
func (c *Client) UpdateAccounts(ctx context.Context, path string, payload *UpdateAccountRequest, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateAccountsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAccountsRequest create the request corresponding to the update action endpoint of the accounts resource.
func (c *Client) NewUpdateAccountsRequest(ctx context.Context, path string, payload *UpdateAccountRequest, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
