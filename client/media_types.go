// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Iroha-Gateway Server": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.2.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// Accountresponse media type (default view)
//
// Identifier: application/vnd.accountresponse+json; view=default
type Accountresponse struct {
	// account
	Account *Account `form:"account" json:"account" xml:"account"`
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Accountresponse media type instance.
func (mt *Accountresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Account == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "account"))
	}
	if mt.Account != nil {
		if err2 := mt.Account.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAccountresponse decodes the Accountresponse instance encoded in resp body.
func (c *Client) DecodeAccountresponse(resp *http.Response) (*Accountresponse, error) {
	var decoded Accountresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Accountsresponse media type (default view)
//
// Identifier: application/vnd.accountsresponse+json; view=default
type Accountsresponse struct {
	// accounts
	Accounts []*Account `form:"accounts" json:"accounts" xml:"accounts"`
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Accountsresponse media type instance.
func (mt *Accountsresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Accounts == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "accounts"))
	}
	for _, e := range mt.Accounts {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAccountsresponse decodes the Accountsresponse instance encoded in resp body.
func (c *Client) DecodeAccountsresponse(resp *http.Response) (*Accountsresponse, error) {
	var decoded Accountsresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Currencyresponse media type (default view)
//
// Identifier: application/vnd.currencyresponse+json; view=default
type Currencyresponse struct {
	// response code
	Code     int         `form:"code" json:"code" xml:"code"`
	Currency []*Currency `form:"currency" json:"currency" xml:"currency"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Currencyresponse media type instance.
func (mt *Currencyresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "currency"))
	}
	for _, e := range mt.Currency {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCurrencyresponse decodes the Currencyresponse instance encoded in resp body.
func (c *Client) DecodeCurrencyresponse(resp *http.Response) (*Currencyresponse, error) {
	var decoded Currencyresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Basic response (default view)
//
// Identifier: application/vnd.messageresponse+json; view=default
type Messageresponse struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Messageresponse media type instance.
func (mt *Messageresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	return
}

// DecodeMessageresponse decodes the Messageresponse instance encoded in resp body.
func (c *Client) DecodeMessageresponse(resp *http.Response) (*Messageresponse, error) {
	var decoded Messageresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Signatoriesresponse media type (default view)
//
// Identifier: application/vnd.signatoriesresponse+json; view=default
type Signatoriesresponse struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message     string   `form:"message" json:"message" xml:"message"`
	Signatories []string `form:"signatories" json:"signatories" xml:"signatories"`
}

// Validate validates the Signatoriesresponse media type instance.
func (mt *Signatoriesresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Signatories == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "signatories"))
	}
	return
}

// DecodeSignatoriesresponse decodes the Signatoriesresponse instance encoded in resp body.
func (c *Client) DecodeSignatoriesresponse(resp *http.Response) (*Signatoriesresponse, error) {
	var decoded Signatoriesresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Transactionsresponse media type (default view)
//
// Identifier: application/vnd.transactionsresponse+json; view=default
type Transactionsresponse struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message      string         `form:"message" json:"message" xml:"message"`
	Transactions []*Transaction `form:"transactions" json:"transactions" xml:"transactions"`
}

// Validate validates the Transactionsresponse media type instance.
func (mt *Transactionsresponse) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Transactions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "transactions"))
	}
	for _, e := range mt.Transactions {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTransactionsresponse decodes the Transactionsresponse instance encoded in resp body.
func (c *Client) DecodeTransactionsresponse(resp *http.Response) (*Transactionsresponse, error) {
	var decoded Transactionsresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
