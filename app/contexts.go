// API "Iroha-Gateway Server": Application Contexts
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.1.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
	"strconv"
)

// AddAccountsContext provides the accounts add action context.
type AddAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddAccountRequest
}

// NewAddAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller add action.
func NewAddAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddAccountsContext) Created(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAccountsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddAccountsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteAccountsContext provides the accounts delete action context.
type DeleteAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Target  string
	Payload *DeleteAccountRequest
}

// NewDeleteAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller delete action.
func NewDeleteAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAccountsContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAccountsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteAccountsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAccountsContext provides the accounts get action context.
type GetAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey *string
	IsCommitted   *bool
	Target        string
}

// NewGetAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller get action.
func NewGetAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) > 0 {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = &rawCreatorPubkey
		if rctx.CreatorPubkey != nil {
			if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, *rctx.CreatorPubkey); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`creator_pubkey`, *rctx.CreatorPubkey, `[0-9a-zA-Z-_.~]+`))
			}
		}
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp1 := &isCommitted
			rctx.IsCommitted = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAccountsContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAccountsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAccountsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllAccountsContext provides the accounts getAll action context.
type GetAllAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetAllAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller getAll action.
func NewGetAllAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllAccountsContext) OK(r *Accounts) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.accounts+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllAccountsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllAccountsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateAccountsContext provides the accounts update action context.
type UpdateAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Target  string
	Payload *UpdateAccountRequest
}

// NewUpdateAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller update action.
func NewUpdateAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateAccountsContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAccountsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateAccountsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddCurrencyContext provides the currency add action context.
type AddCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCurrencyRequest
}

// NewAddCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller add action.
func NewAddCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddCurrencyContext) Created(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddValueCurrencyContext provides the currency addValue action context.
type AddValueCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyValueRequest
}

// NewAddValueCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller addValue action.
func NewAddValueCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddValueCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddValueCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddValueCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddValueCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddValueCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteCurrencyContext provides the currency delete action context.
type DeleteCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *DeleteCurrencyRequest
}

// NewDeleteCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller delete action.
func NewDeleteCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllCurrencyContext provides the currency getAll action context.
type GetAllCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey string
	CurrencyURI   string
	IsCommitted   *bool
	Target        string
}

// NewGetAllCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller getAll action.
func NewGetAllCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("creator_pubkey"))
	} else {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = rawCreatorPubkey
	}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp2 := &isCommitted
			rctx.IsCommitted = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("target"))
	} else {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllCurrencyContext) OK(r *Currency) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.currency+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SubtractValueCurrencyContext provides the currency subtractValue action context.
type SubtractValueCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyValueRequest
}

// NewSubtractValueCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller subtractValue action.
func NewSubtractValueCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubtractValueCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubtractValueCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SubtractValueCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubtractValueCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SubtractValueCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// TransferCurrencyContext provides the currency transfer action context.
type TransferCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyTransferRequest
}

// NewTransferCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller transfer action.
func NewTransferCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*TransferCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TransferCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TransferCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *TransferCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *TransferCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateCurrencyContext provides the currency update action context.
type UpdateCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *UpdateCurrencyRequest
}

// NewUpdateCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller update action.
func NewUpdateCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateQuorumContext provides the quorum update action context.
type UpdateQuorumContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Target  string
	Payload *UpdateQuorumRequest
}

// NewUpdateQuorumContext parses the incoming request URL and body, performs validations and creates the
// context used by the quorum controller update action.
func NewUpdateQuorumContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateQuorumContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateQuorumContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateQuorumContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateQuorumContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateQuorumContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddSignatoriesContext provides the signatories add action context.
type AddSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Target  string
	Payload *SignatoryRequest
}

// NewAddSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller add action.
func NewAddSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddSignatoriesContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteSignatoriesContext provides the signatories delete action context.
type DeleteSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Sig     string
	Target  string
	Payload *DeleteSignatoryRequest
}

// NewDeleteSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller delete action.
func NewDeleteSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSig := req.Params["sig"]
	if len(paramSig) > 0 {
		rawSig := paramSig[0]
		rctx.Sig = rawSig
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Sig); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`sig`, rctx.Sig, `[0-9a-zA-Z-_.~]+`))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteSignatoriesContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllSignatoriesContext provides the signatories getAll action context.
type GetAllSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey *string
	IsCommitted   *bool
	Target        string
}

// NewGetAllSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller getAll action.
func NewGetAllSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) > 0 {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = &rawCreatorPubkey
		if rctx.CreatorPubkey != nil {
			if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, *rctx.CreatorPubkey); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`creator_pubkey`, *rctx.CreatorPubkey, `[0-9a-zA-Z-_.~]+`))
			}
		}
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp3 := &isCommitted
			rctx.IsCommitted = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) > 0 {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllSignatoriesContext) OK(r *Signatories) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.signatories+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllTransactionsContext provides the transactions getAll action context.
type GetAllTransactionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey string
	CurrencyURI   string
	IsCommitted   *bool
	Target        string
}

// NewGetAllTransactionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the transactions controller getAll action.
func NewGetAllTransactionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllTransactionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllTransactionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("creator_pubkey"))
	} else {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = rawCreatorPubkey
	}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp4 := &isCommitted
			rctx.IsCommitted = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("target"))
	} else {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllTransactionsContext) OK(r *Transactions) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.transactions+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllTransactionsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllTransactionsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
